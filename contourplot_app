classdef contourplotapp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                      matlab.ui.Figure
        Toolbar                       matlab.ui.container.Toolbar
        PushTool                      matlab.ui.container.toolbar.PushTool
        GridLayout                    matlab.ui.container.GridLayout
        LeftPanel                     matlab.ui.container.Panel
        GridLayout4                   matlab.ui.container.GridLayout
        ColorbarlimitsLabel           matlab.ui.control.Label
        QualityDropDown               matlab.ui.control.DropDown
        QualityDropDownLabel          matlab.ui.control.Label
        ImporteddataTextArea          matlab.ui.control.TextArea
        ImporteddataTextAreaLabel     matlab.ui.control.Label
        TesttypeDropDown              matlab.ui.control.DropDown
        TesttypeDropDownLabel         matlab.ui.control.Label
        ContourplottypeDropDown       matlab.ui.control.DropDown
        ContourplottypeDropDownLabel  matlab.ui.control.Label
        LevelsSlider                  matlab.ui.control.Slider
        ContourplotslevelsLabel       matlab.ui.control.Label
        SheetnameEditField            matlab.ui.control.EditField
        SheetnameEditFieldLabel       matlab.ui.control.Label
        MODULUSmaxvalueSpinner        matlab.ui.control.Spinner
        MODULUSmaxvalueSpinnerLabel   matlab.ui.control.Label
        MODULUSminvalueSpinner        matlab.ui.control.Spinner
        MODULUSminvalueSpinnerLabel   matlab.ui.control.Label
        HARDNESSmaxvalueSpinner       matlab.ui.control.Spinner
        HARDNESSmaxvalueSpinnerLabel  matlab.ui.control.Label
        HARDNESSminvalueSpinner       matlab.ui.control.Spinner
        HARDNESSminvalueSpinnerLabel  matlab.ui.control.Label
        SavecleaneddataButton         matlab.ui.control.Button
        SavehistogramsButton          matlab.ui.control.Button
        SavecontourplotsButton        matlab.ui.control.Button
        AnalyzecontourplotsButton     matlab.ui.control.Button
        AnalyzehistogramsButton       matlab.ui.control.Button
        francescbarberaupceduLabel    matlab.ui.control.Label
        FrancescBarberFlichiLabel     matlab.ui.control.Label
        ResetvaluesButton             matlab.ui.control.Button
        PreviewcontourplotsButton     matlab.ui.control.Button
        PreviewhistogramsButton       matlab.ui.control.Button
        ImportandcleandataButton      matlab.ui.control.Button
        RightPanel                    matlab.ui.container.Panel
        GridLayout3                   matlab.ui.container.GridLayout
        UIAxes4                       matlab.ui.control.UIAxes
        UIAxes3                       matlab.ui.control.UIAxes
        UIAxes2                       matlab.ui.control.UIAxes
        UIAxes                        matlab.ui.control.UIAxes
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
    end

    
    properties (Access = public)
        cleandata table 
        hardness_histogram
        modulus_histogram
        contour_hardness
        contour_modulus
        X_sorted
        Y_sorted
        Z1_matrix_clipped
        Z2_matrix_clipped
        selected_file
        fig1 % hardness histogram
        fig2 % modulus histogram
        fig3 % hardness contour plot
        fig4 % modulus contour plot
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Value changed function: SheetnameEditField
        function SheetnameEditFieldValueChanged(app, event)
            sheet_name = app.SheetnameEditField.Value;
            
        end

        % Button pushed function: ImportandcleandataButton
        function ImportandcleandataButtonPushed(app, event)
                     
            sheet_name = app.SheetnameEditField.Value;
            
            if isempty(sheet_name)
                uialert(app.UIFigure, 'Sheet name field is empty', 'Error', 'Icon','error')
                return;
            end
           
            [app.selected_file, path] = uigetfile('*.xlsx', 'Select an Excel file');
            
            if isequal(app.selected_file, 0)               
                return;
            end

            waitMsg = msgbox('Importing and cleaning data. Please wait...', 'Please Wait', 'modal');
            
            filePath = fullfile(path, app.selected_file);
            excel_file = readtable(filePath, "Sheet", sheet_name, "TextType", "string");
                 
            % Verificar si las columnas HARDNESS y MODULUS existen en el archivo Excel
            if ~ismember('HARDNESS', excel_file.Properties.VariableNames) || ~ismember('MODULUS', excel_file.Properties.VariableNames)
                % Mostrar un mensaje de error si alguna de las columnas no est치 presente
                uialert(app.UIFigure, 'HARDNESS and/or MODULUS Excel columns not found. Verify if the file contain both HARDNESS and MODULUS columns, specified in capital letters.', 'Error', 'Icon','error');
                close(waitMsg);
                return;
            end

            % Excel cleaning
            rowswithNaN=isnan(excel_file.HARDNESS) | isnan(excel_file.MODULUS);
            app.cleandata=excel_file(~rowswithNaN,:);
            app.cleandata(1, :) = [];
            
            close(waitMsg);

            app.ImporteddataTextArea.Value = app.selected_file; 
            
            % Muestra un mensaje de confirmaci칩n al usuario
            uialert(app.UIFigure ,'Data imported sucessfully', 'Success', 'Icon','success');
    

        end

        % Button pushed function: SavecleaneddataButton
        function SavecleaneddataButtonPushed(app, event)
            if isempty(app.selected_file)
                uialert(app.UIFigure, 'File selection empty.', 'Error','Icon','error');
                return;
            end
            
            % Obtener el nombre del archivo de destino del usuario
            [savefile, savepath] = uiputfile('*.xlsx', 'Save Cleaned Data as Excel');
            
            % Verificar si el usuario ha cancelado la operaci칩n de guardado
            if isequal(savefile, 0)
                return;
            end
            
            % Crear la ruta completa para el nuevo archivo Excel
            saveFilePath = fullfile(savepath, savefile);
            
            % Guardar los datos limpios en el nuevo archivo Excel
            writetable(app.cleandata, saveFilePath, 'Sheet', app.SheetnameEditField.Value);
            
            % Muestra un mensaje de confirmaci칩n al usuario
            uialert(app.UIFigure, ['Cleaned data has been saved in ' saveFilePath], 'Success', 'Icon','success');

        end

        % Button pushed function: PreviewhistogramsButton
        function PreviewhistogramsButtonPushed(app, event)
            if ~isempty(app.cleandata)
                app.hardness_histogram = histogram(app.UIAxes,app.cleandata.HARDNESS);
                app.modulus_histogram = histogram(app.UIAxes2,app.cleandata.MODULUS);
            else
                uialert(app.UIFigure, 'No data imported.', 'Error', 'Icon', 'error');
            end

        end

        % Value changed function: HARDNESSminvalueSpinner
        function HARDNESSminvalueSpinnerValueChanged(app, event)
            hmin_value = app.HARDNESSminvalueSpinner.Value;
            
        end

        % Value changed function: HARDNESSmaxvalueSpinner
        function HARDNESSmaxvalueSpinnerValueChanged(app, event)
            hmax_value = app.HARDNESSmaxvalueSpinner.Value;
            
        end

        % Value changed function: MODULUSminvalueSpinner
        function MODULUSminvalueSpinnerValueChanged(app, event)
            mmin_value = app.MODULUSminvalueSpinner.Value;
            
        end

        % Value changed function: MODULUSmaxvalueSpinner
        function MODULUSmaxvalueSpinnerValueChanged(app, event)
            mmax_value = app.MODULUSmaxvalueSpinner.Value;
            
        end

        % Button pushed function: PreviewcontourplotsButton
        function PreviewcontourplotsButtonPushed(app, event)
            if isempty(app.cleandata)
                uialert(app.UIFigure, 'No data imported', 'Error', 'Icon', 'error');
                return;
            end

            % Definir las variables hmin_value y hmax_value
            hmin_value = app.HARDNESSminvalueSpinner.Value;
            hmax_value = app.HARDNESSmaxvalueSpinner.Value;
    
            mmin_value = app.MODULUSminvalueSpinner.Value;
            mmax_value = app.MODULUSmaxvalueSpinner.Value;
            
            % DATA FOR THE CONTOUR PLOTS
            try
                if app.TesttypeDropDown.Value == "3D"
                    % 3D MAPPING
                    app.X_sorted = sort(unique(app.cleandata.XPosition));
                    app.Y_sorted = sort(unique(app.cleandata.YPosition));
            
                    [x_grid, y_grid] = meshgrid(app.X_sorted, app.Y_sorted);
            
                    % 3D MAPPING
                    Z1_interpolated = griddata(app.cleandata.XPosition, app.cleandata.YPosition, app.cleandata.HARDNESS, x_grid, y_grid, 'linear');
                    Z2_interpolated = griddata(app.cleandata.XPosition, app.cleandata.YPosition, app.cleandata.MODULUS, x_grid, y_grid, 'linear');
            
            
                elseif app.TesttypeDropDown.Value == "4D"
                    % 4D MAPPING
                    app.X_sorted = sort(unique(app.cleandata.X));
                    app.Y_sorted = sort(unique(app.cleandata.Y));
            
                    [x_grid, y_grid] = meshgrid(app.X_sorted, app.Y_sorted);
            
                    % 4D MAPPING
                    Z1_interpolated = griddata(app.cleandata.X, app.cleandata.Y, app.cleandata.HARDNESS, x_grid, y_grid, 'linear');
                    Z2_interpolated = griddata(app.cleandata.X, app.cleandata.Y, app.cleandata.MODULUS, x_grid, y_grid, 'linear');
            
                end
            catch exception
                errordlg(['Error: ' exception.message 'Check the test type selection'], 'Variable Error');
            end
          
            % Verificar que los l칤mites son v치lidos
            if hmin_value >= hmax_value || mmin_value >= mmax_value
                % Mostrar un mensaje de error al usuario
                uialert(app.UIFigure, 'The color scale limits are invalid. The lower limit must be less than the upper limit.', 'Error', 'Icon', 'error');
                return;               
            end

            % CREATION OF THE CONTOUR PLOTS
            % HARDNESS contour plot
            % Recortar los valores interpolados seg칰n vmin/vmax
            app.Z1_matrix_clipped = min(max(Z1_interpolated, hmin_value), hmax_value);

            % Crear el gr치fico de contorno lleno (contourf)
            app.contour_hardness = contourf(app.UIAxes3, app.X_sorted, app.Y_sorted, app.Z1_matrix_clipped, app.LevelsSlider.Value, 'LineStyle', 'none');

            % Colocar la barra de color
            cbar1 = colorbar(app.UIAxes3);
            cbar1.Label.String = 'Hardness [GPa]';
            cbar1.Label.FontSize = 18;         

            % Modificar los l칤mites de la colorbar
            clim(app.UIAxes3, [hmin_value, hmax_value]); % Utiliza caxis para establecer los l칤mites

            colormap(app.UIAxes3, app.ContourplottypeDropDown.Value);

            % Configurar el tama침o de fuente para los ejes y la barra de color
            ax3 = app.UIAxes3;
            ax3.FontSize = 18;
            cbar1.FontSize = 18;

            % Configurar las etiquetas de los ejes
            xlabel(ax3,'X Position [풮m]', 'FontSize', 18);
            ylabel(ax3,'Y Position [풮m]', 'FontSize', 18);
           
            % Ajustar el tama침o de fuente de los t칤tulos de los ejes X e Y
            ax3.XLabel.FontSize = 18;
            ax3.YLabel.FontSize = 18;
            
            xticks(ax3, 'auto');
            yticks(ax3, 'auto');
            ax3.XAxis.TickDirection = 'out';
            ax3.YAxis.TickDirection = 'out';
            ax3.TickLength = [0.01, 0.01];
            % Establecer el t칤tulo del subplot
            title(ax3,'HARDNESS contour plot', 'FontSize', 18);

            axis(ax3, 'equal');

            % MODULUS contour plot
            % Recortar los valores interpolados seg칰n vmin/vmax
            app.Z2_matrix_clipped = min(max(Z2_interpolated, mmin_value), mmax_value);

            % Crear el gr치fico de contorno lleno (contourf)
            app.contour_modulus = contourf(app.UIAxes4, app.X_sorted, app.Y_sorted, app.Z2_matrix_clipped, app.LevelsSlider.Value, 'LineStyle', 'none');

            % Colocar la barra de color
            cbar2 = colorbar(app.UIAxes4);
            cbar2.Label.String = 'Modulus [GPa]';
            cbar2.Label.FontSize = 18;

            % Modificar los l칤mites de la colorbar
            clim(app.UIAxes4, [mmin_value, mmax_value]); % Utiliza caxis para establecer los l칤mites

            colormap(app.UIAxes4, app.ContourplottypeDropDown.Value);

            % Configurar el tama침o de fuente para los ejes y la barra de color
            ax4 = app.UIAxes4;
            ax4.FontSize = 18;
            cbar2.FontSize = 18;

            % Configurar las etiquetas de los ejes
            xlabel(ax4,'X Position [풮m]', 'FontSize', 18);
            ylabel(ax4,'Y Position [풮m]', 'FontSize', 18);

            % Ajustar el tama침o de fuente de los t칤tulos de los ejes X e Y
            ax4.XLabel.FontSize = 18;
            ax4.YLabel.FontSize = 18;
            
            xticks(ax4, 'auto');
            yticks(ax4, 'auto');
            ax4.XAxis.TickDirection = 'out';
            ax4.YAxis.TickDirection = 'out';
            ax4.TickLength = [0.01, 0.01];

            % Establecer el t칤tulo del subplot
            title(ax4,'MODULUS contour plot', 'FontSize', 18);

            axis(ax4, 'equal');          
        end

        % Button pushed function: ResetvaluesButton
        function ResetvaluesButtonPushed(app, event)
            app.HARDNESSminvalueSpinner.Value = 0;
            app.HARDNESSmaxvalueSpinner.Value = 0;
            app.MODULUSminvalueSpinner.Value = 0; 
            app.MODULUSmaxvalueSpinner.Value = 0; 
        end

        % Button pushed function: AnalyzehistogramsButton
        function AnalyzehistogramsButtonPushed(app, event)
            % Verificar si existen histogramas para guardar
            if isempty(app.hardness_histogram) || isempty(app.modulus_histogram)
                uialert(app.UIFigure, 'No histograms to show.', 'Error', 'Icon', 'error');
                return;
            end             

            % Crear una nueva figura
            app.fig1 = figure;

            % Agregar un conjunto de ejes a la figura
            ax1 = axes(app.fig1);

            % Asumiendo que app.hardness es un gr치fico v치lido, puedes copiarlo a los nuevos ejes
            copyobj(app.hardness_histogram, ax1);

            % Personalizar los ejes o la figura seg칰n sea necesario
            xlabel(ax1, 'Hardness');
            ylabel(ax1, 'Frequency');
            title(ax1, 'Hardness Histogram');  

            app.fig2 = figure;
            ax2 = axes(app.fig2);
            copyobj(app.modulus_histogram, ax2);
            xlabel(ax2, 'Modulus');
            ylabel(ax2, 'Frequency');
            title(ax2, 'Modulus Historgam');
            

        end

        % Button pushed function: SavehistogramsButton
        function SavehistogramsButtonPushed(app, event)
            if isempty(app.hardness_histogram) || isempty(app.modulus_histogram)
                uialert(app.UIFigure, 'No histograms to save.', 'Error', 'Icon', 'error');
                return;
            end     
            
            % Obtener el nombre del archivo de destino del usuario
            [filename, path] = uiputfile('*.png', 'Save histograms as PNG');
    
            % Verificar si el usuario ha cancelado la operaci칩n de guardado
            if isequal(filename, 0)
                return;
            end
              
            h = waitbar(0, 'Saving...');  
            
            % Verificar si el nombre del archivo ya tiene la extensi칩n .png
            [~, name, ext] = fileparts(filename);
            if strcmpi(ext, '.png')
                % Eliminar la extensi칩n .png si ya est치 presente
                filename = name;
            end
            
            % Crear una ruta completa para los archivos de destino
            fullpath1 = fullfile(path, [filename, '_HARDNESS.png']);
            fullpath2 = fullfile(path, [filename, '_MODULUS.png']);

            exportgraphics(app.UIAxes, fullpath1, 'Resolution', app.QualityDropDown.Value, 'BackgroundColor', 'none');
            waitbar(0.5, h, 'Saving...');

            exportgraphics(app.UIAxes2, fullpath2, 'Resolution', app.QualityDropDown.Value, 'BackgroundColor', 'none');
            waitbar(1, h, 'Saving...');

            close(h);

            % Muestra un mensaje de confirmaci칩n al usuario
            uialert(app.UIFigure, ['Histograms have been saved in' fullpath1 ' and ' fullpath2], 'Success', 'Icon','success');

        end

        % Button pushed function: AnalyzecontourplotsButton
        function AnalyzecontourplotsButtonPushed(app, event)
              if isempty(app.contour_hardness) || isempty(app.contour_modulus)
                  uialert(app.UIFigure, 'No contour plots to show.', 'Error', 'Icon', 'error');
                  return;
              end

             if isempty(app.contour_hardness) || isempty(app.contour_modulus)
                  uialert(app.UIFigure, 'No contour plots to show.', 'Error', 'Icon', 'error');
                  return;
              end

            % Definir las variables hmin_value y hmax_value
            hmin_value = app.HARDNESSminvalueSpinner.Value;
            hmax_value = app.HARDNESSmaxvalueSpinner.Value;
            mmin_value = app.MODULUSminvalueSpinner.Value;
            mmax_value = app.MODULUSmaxvalueSpinner.Value;
           
            % Crear una nueva figura para el gr치fico de contorno de HARDNESS
            app.fig3 = figure;
            ax3 = axes(app.fig3);
            contourf(ax3, app.X_sorted, app.Y_sorted, app.Z1_matrix_clipped, app.LevelsSlider.Value, 'LineStyle','none');
             
            colormap(ax3, app.ContourplottypeDropDown.Value);
    
            % Configurar etiquetas y t칤tulo
            xlabel(ax3, 'X Position [풮m]', 'FontSize', 18);
            ylabel(ax3, 'Y Position [풮m]', 'FontSize', 18);
            title(ax3, 'HARDNESS contour plot', 'FontSize', 18);
            colorbar(ax3, 'FontSize', 18);
            colormap(app.fig3, app.ContourplottypeDropDown.Value);
            clim(ax3, [hmin_value, hmax_value]);
            axis(ax3, 'equal');
            xticks(ax3, 'auto');
            yticks(ax3, 'auto');
            ax3.XAxis.TickDirection = 'out';
            ax3.YAxis.TickDirection = 'out';
            ax3.TickLength = [0.01, 0.01];


            % Crear una nueva figura para el gr치fico de contorno de MODULUS
            app.fig4 = figure;
            ax4 = axes(app.fig4);
            contourf(ax4, app.X_sorted, app.Y_sorted, app.Z2_matrix_clipped, app.LevelsSlider.Value, 'LineStyle','none');

            colormap(ax4, app.ContourplottypeDropDown.Value);
            
            % Configurar etiquetas y t칤tulo
            xlabel(ax4, 'X Position [풮m]', 'FontSize', 18);
            ylabel(ax4, 'Y Position [풮m]', 'FontSize', 18);
            title(ax4, 'MODULUS contour plot', 'FontSize', 18);
            colorbar(ax4, 'FontSize', 18);
            clim(ax4, [mmin_value, mmax_value]);
            colormap(app.fig4, app.ContourplottypeDropDown.Value);
            axis(ax4, 'equal');
            xticks(ax4, 'auto');
            yticks(ax4, 'auto');
            ax4.XAxis.TickDirection = 'out';
            ax4.YAxis.TickDirection = 'out';
            ax4.TickLength = [0.01, 0.01];

        end

        % Button pushed function: SavecontourplotsButton
        function SavecontourplotsButtonPushed(app, event)
            if isempty(app.hardness_histogram) || isempty(app.modulus_histogram)
                uialert(app.UIFigure, 'No contour plots to save.', 'Error', 'Icon', 'error');
                return;
            end     
            
            % Obtener el nombre del archivo de destino del usuario
            [filename, path] = uiputfile('*.png', 'Save Contour Plots as PNG');   
            
            h = waitbar(0, 'Saving...');

            % Verificar si el usuario ha cancelado la operaci칩n de guardado
            if isequal(filename, 0)
                close(h);
                return;              
            end                     
             
                        
            % Verificar si el nombre del archivo ya tiene la extensi칩n .png
            [~, name, ext] = fileparts(filename);
            if strcmpi(ext, '.png')
                % Eliminar la extensi칩n .png si ya est치 presente
                filename = name;
            end
            
            % Crear una ruta completa para los archivos de destino
            fullpath1 = fullfile(path, [filename, '_HARDNESS.png']);
            fullpath2 = fullfile(path, [filename, '_MODULUS.png']);

            % Guardar las figuras como archivos PNG
            exportgraphics(app.UIAxes3, fullpath1, 'Resolution', app.QualityDropDown.Value, 'BackgroundColor', 'none');
            waitbar(0.5, h, 'Saving...');
            
            exportgraphics(app.UIAxes4, fullpath2, 'Resolution', app.QualityDropDown.Value, 'BackgroundColor', 'none');
            waitbar(1, h, 'Saving...');

            close(h);
    
            % Muestra un mensaje de confirmaci칩n al usuario
            uialert(app.UIFigure, ['Contour plots have been saved in ' fullpath1 ' and ' fullpath2], 'Success', 'Icon','success');
        end

        % Value changed function: LevelsSlider
        function LevelsSliderValueChanged(app, event)
            value = app.LevelsSlider.Value;
            
        end

        % Value changed function: ContourplottypeDropDown
        function ContourplottypeDropDownValueChanged(app, event)
            value = app.ContourplottypeDropDown.Value;
            
        end

        % Callback function: PushTool
        function ShowHelpToolClicked(app, event)
            % Definir el contenido de la ventana de ayuda
            helpText = {'The app interface is structured to be used from the top to the bottom. First, you must write the sheet name where the nanoindentation ' ...
                ['data is stored and then click on import data. By clicking the Create Histograms button, histograms of hardness and modulus will be showed up. ' ...
                'From these, you can select the hardness and modulus range values to adjust the color bar of the contour plots.']};

            % Convertir el contenido de ayuda en una sola cadena de caracteres
            helpMessage = strjoin(helpText, '\n');

            % Mostrar una ventana emergente de ayuda
            uialert(app.UIFigure, helpMessage, 'Help', 'icon', 'info');
        end

        % Value changed function: TesttypeDropDown
        function TesttypeDropDownValueChanged(app, event)
            value = app.TesttypeDropDown.Value;
        end

        % Value changed function: ImporteddataTextArea
        function ImporteddataTextAreaValueChanged(app, event)
            value = app.ImporteddataTextArea.Value;
            
        end

        % Value changed function: QualityDropDown
        function QualityDropDownValueChanged(app, event)
            value = app.QualityDropDown.Value;
            
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 2x1 grid
                app.GridLayout.RowHeight = {1080, 1080};
                app.GridLayout.ColumnWidth = {'1x'};
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 1;
            else
                % Change to a 1x2 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {290, '1x'};
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 2;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Get the file path for locating images
            pathToMLAPP = fileparts(mfilename('fullpath'));

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            app.UIFigure.Position = [100 100 1628 1080];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);

            % Create Toolbar
            app.Toolbar = uitoolbar(app.UIFigure);

            % Create PushTool
            app.PushTool = uipushtool(app.Toolbar);
            app.PushTool.ClickedCallback = createCallbackFcn(app, @ShowHelpToolClicked, true);
            app.PushTool.Icon = fullfile(pathToMLAPP, 'icone-point-d-interrogation-question-gris.png');

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {290, '1x'};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.BackgroundColor = [0.8 0.8 0.8];
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;
            app.LeftPanel.Scrollable = 'on';

            % Create GridLayout4
            app.GridLayout4 = uigridlayout(app.LeftPanel);
            app.GridLayout4.ColumnWidth = {20, '1x', 50, 50, 50, '1x', 20};
            app.GridLayout4.RowHeight = {23, 24, 23, 'fit', 23, 'fit', 22, 22, 22, 'fit', 23, '1x', '1x', 'fit', 'fit', 22, 22, 'fit', 22, 'fit', 'fit', 'fit', '1x', 23, 23, 23, '1x', 'fit', 'fit', 23, 23, '2.38x', 22, 22};
            app.GridLayout4.ColumnSpacing = 7;
            app.GridLayout4.Padding = [7 10 7 10];

            % Create ImportandcleandataButton
            app.ImportandcleandataButton = uibutton(app.GridLayout4, 'push');
            app.ImportandcleandataButton.ButtonPushedFcn = createCallbackFcn(app, @ImportandcleandataButtonPushed, true);
            app.ImportandcleandataButton.Layout.Row = 2;
            app.ImportandcleandataButton.Layout.Column = [3 5];
            app.ImportandcleandataButton.Text = 'Import and clean data';

            % Create PreviewhistogramsButton
            app.PreviewhistogramsButton = uibutton(app.GridLayout4, 'push');
            app.PreviewhistogramsButton.ButtonPushedFcn = createCallbackFcn(app, @PreviewhistogramsButtonPushed, true);
            app.PreviewhistogramsButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.PreviewhistogramsButton.FontWeight = 'bold';
            app.PreviewhistogramsButton.Layout.Row = 4;
            app.PreviewhistogramsButton.Layout.Column = [3 5];
            app.PreviewhistogramsButton.Text = 'Preview histograms';

            % Create PreviewcontourplotsButton
            app.PreviewcontourplotsButton = uibutton(app.GridLayout4, 'push');
            app.PreviewcontourplotsButton.ButtonPushedFcn = createCallbackFcn(app, @PreviewcontourplotsButtonPushed, true);
            app.PreviewcontourplotsButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.PreviewcontourplotsButton.FontWeight = 'bold';
            app.PreviewcontourplotsButton.Layout.Row = 24;
            app.PreviewcontourplotsButton.Layout.Column = [3 5];
            app.PreviewcontourplotsButton.Text = 'Preview contour plots';

            % Create ResetvaluesButton
            app.ResetvaluesButton = uibutton(app.GridLayout4, 'push');
            app.ResetvaluesButton.ButtonPushedFcn = createCallbackFcn(app, @ResetvaluesButtonPushed, true);
            app.ResetvaluesButton.BackgroundColor = [0.9412 0.9412 0.9412];
            app.ResetvaluesButton.FontWeight = 'bold';
            app.ResetvaluesButton.FontAngle = 'italic';
            app.ResetvaluesButton.Layout.Row = 11;
            app.ResetvaluesButton.Layout.Column = [3 5];
            app.ResetvaluesButton.Text = 'Reset values';

            % Create FrancescBarberFlichiLabel
            app.FrancescBarberFlichiLabel = uilabel(app.GridLayout4);
            app.FrancescBarberFlichiLabel.FontWeight = 'bold';
            app.FrancescBarberFlichiLabel.FontAngle = 'italic';
            app.FrancescBarberFlichiLabel.FontColor = [1 0 0];
            app.FrancescBarberFlichiLabel.Layout.Row = 33;
            app.FrancescBarberFlichiLabel.Layout.Column = [2 5];
            app.FrancescBarberFlichiLabel.Text = 'Francesc Barber치 Flichi';

            % Create francescbarberaupceduLabel
            app.francescbarberaupceduLabel = uilabel(app.GridLayout4);
            app.francescbarberaupceduLabel.FontWeight = 'bold';
            app.francescbarberaupceduLabel.FontAngle = 'italic';
            app.francescbarberaupceduLabel.Layout.Row = 34;
            app.francescbarberaupceduLabel.Layout.Column = [2 5];
            app.francescbarberaupceduLabel.Text = 'francesc.barbera@upc.edu';

            % Create AnalyzehistogramsButton
            app.AnalyzehistogramsButton = uibutton(app.GridLayout4, 'push');
            app.AnalyzehistogramsButton.ButtonPushedFcn = createCallbackFcn(app, @AnalyzehistogramsButtonPushed, true);
            app.AnalyzehistogramsButton.BackgroundColor = [1 1 1];
            app.AnalyzehistogramsButton.Layout.Row = 25;
            app.AnalyzehistogramsButton.Layout.Column = [3 5];
            app.AnalyzehistogramsButton.Text = 'Analyze histograms ';

            % Create AnalyzecontourplotsButton
            app.AnalyzecontourplotsButton = uibutton(app.GridLayout4, 'push');
            app.AnalyzecontourplotsButton.ButtonPushedFcn = createCallbackFcn(app, @AnalyzecontourplotsButtonPushed, true);
            app.AnalyzecontourplotsButton.BackgroundColor = [1 1 1];
            app.AnalyzecontourplotsButton.Layout.Row = 26;
            app.AnalyzecontourplotsButton.Layout.Column = [3 5];
            app.AnalyzecontourplotsButton.Text = 'Analyze contour plots';

            % Create SavecontourplotsButton
            app.SavecontourplotsButton = uibutton(app.GridLayout4, 'push');
            app.SavecontourplotsButton.ButtonPushedFcn = createCallbackFcn(app, @SavecontourplotsButtonPushed, true);
            app.SavecontourplotsButton.BackgroundColor = [1 0 0];
            app.SavecontourplotsButton.FontWeight = 'bold';
            app.SavecontourplotsButton.Layout.Row = 31;
            app.SavecontourplotsButton.Layout.Column = [3 5];
            app.SavecontourplotsButton.Text = 'Save contour plots';

            % Create SavehistogramsButton
            app.SavehistogramsButton = uibutton(app.GridLayout4, 'push');
            app.SavehistogramsButton.ButtonPushedFcn = createCallbackFcn(app, @SavehistogramsButtonPushed, true);
            app.SavehistogramsButton.BackgroundColor = [1 0 0];
            app.SavehistogramsButton.FontWeight = 'bold';
            app.SavehistogramsButton.Layout.Row = 30;
            app.SavehistogramsButton.Layout.Column = [3 5];
            app.SavehistogramsButton.Text = 'Save histograms';

            % Create SavecleaneddataButton
            app.SavecleaneddataButton = uibutton(app.GridLayout4, 'push');
            app.SavecleaneddataButton.ButtonPushedFcn = createCallbackFcn(app, @SavecleaneddataButtonPushed, true);
            app.SavecleaneddataButton.Layout.Row = 3;
            app.SavecleaneddataButton.Layout.Column = [3 5];
            app.SavecleaneddataButton.Text = 'Save cleaned data';

            % Create HARDNESSminvalueSpinnerLabel
            app.HARDNESSminvalueSpinnerLabel = uilabel(app.GridLayout4);
            app.HARDNESSminvalueSpinnerLabel.HorizontalAlignment = 'right';
            app.HARDNESSminvalueSpinnerLabel.Layout.Row = 7;
            app.HARDNESSminvalueSpinnerLabel.Layout.Column = [1 4];
            app.HARDNESSminvalueSpinnerLabel.Text = 'HARDNESS min. value';

            % Create HARDNESSminvalueSpinner
            app.HARDNESSminvalueSpinner = uispinner(app.GridLayout4);
            app.HARDNESSminvalueSpinner.ValueChangedFcn = createCallbackFcn(app, @HARDNESSminvalueSpinnerValueChanged, true);
            app.HARDNESSminvalueSpinner.Layout.Row = 7;
            app.HARDNESSminvalueSpinner.Layout.Column = [5 6];

            % Create HARDNESSmaxvalueSpinnerLabel
            app.HARDNESSmaxvalueSpinnerLabel = uilabel(app.GridLayout4);
            app.HARDNESSmaxvalueSpinnerLabel.HorizontalAlignment = 'right';
            app.HARDNESSmaxvalueSpinnerLabel.Layout.Row = 8;
            app.HARDNESSmaxvalueSpinnerLabel.Layout.Column = [1 4];
            app.HARDNESSmaxvalueSpinnerLabel.Text = 'HARDNESS max. value';

            % Create HARDNESSmaxvalueSpinner
            app.HARDNESSmaxvalueSpinner = uispinner(app.GridLayout4);
            app.HARDNESSmaxvalueSpinner.ValueChangedFcn = createCallbackFcn(app, @HARDNESSmaxvalueSpinnerValueChanged, true);
            app.HARDNESSmaxvalueSpinner.Layout.Row = 8;
            app.HARDNESSmaxvalueSpinner.Layout.Column = [5 6];

            % Create MODULUSminvalueSpinnerLabel
            app.MODULUSminvalueSpinnerLabel = uilabel(app.GridLayout4);
            app.MODULUSminvalueSpinnerLabel.HorizontalAlignment = 'right';
            app.MODULUSminvalueSpinnerLabel.Layout.Row = 9;
            app.MODULUSminvalueSpinnerLabel.Layout.Column = [1 4];
            app.MODULUSminvalueSpinnerLabel.Text = 'MODULUS min. value';

            % Create MODULUSminvalueSpinner
            app.MODULUSminvalueSpinner = uispinner(app.GridLayout4);
            app.MODULUSminvalueSpinner.ValueChangedFcn = createCallbackFcn(app, @MODULUSminvalueSpinnerValueChanged, true);
            app.MODULUSminvalueSpinner.Layout.Row = 9;
            app.MODULUSminvalueSpinner.Layout.Column = [5 6];

            % Create MODULUSmaxvalueSpinnerLabel
            app.MODULUSmaxvalueSpinnerLabel = uilabel(app.GridLayout4);
            app.MODULUSmaxvalueSpinnerLabel.HorizontalAlignment = 'right';
            app.MODULUSmaxvalueSpinnerLabel.Layout.Row = 10;
            app.MODULUSmaxvalueSpinnerLabel.Layout.Column = [1 4];
            app.MODULUSmaxvalueSpinnerLabel.Text = 'MODULUS max. value';

            % Create MODULUSmaxvalueSpinner
            app.MODULUSmaxvalueSpinner = uispinner(app.GridLayout4);
            app.MODULUSmaxvalueSpinner.ValueChangedFcn = createCallbackFcn(app, @MODULUSmaxvalueSpinnerValueChanged, true);
            app.MODULUSmaxvalueSpinner.Layout.Row = 10;
            app.MODULUSmaxvalueSpinner.Layout.Column = [5 6];

            % Create SheetnameEditFieldLabel
            app.SheetnameEditFieldLabel = uilabel(app.GridLayout4);
            app.SheetnameEditFieldLabel.HorizontalAlignment = 'right';
            app.SheetnameEditFieldLabel.Layout.Row = 1;
            app.SheetnameEditFieldLabel.Layout.Column = [1 3];
            app.SheetnameEditFieldLabel.Text = 'Sheet name';

            % Create SheetnameEditField
            app.SheetnameEditField = uieditfield(app.GridLayout4, 'text');
            app.SheetnameEditField.ValueChangedFcn = createCallbackFcn(app, @SheetnameEditFieldValueChanged, true);
            app.SheetnameEditField.Layout.Row = 1;
            app.SheetnameEditField.Layout.Column = [4 5];
            app.SheetnameEditField.Value = 'Test 1';

            % Create ContourplotslevelsLabel
            app.ContourplotslevelsLabel = uilabel(app.GridLayout4);
            app.ContourplotslevelsLabel.HorizontalAlignment = 'center';
            app.ContourplotslevelsLabel.FontAngle = 'italic';
            app.ContourplotslevelsLabel.Layout.Row = 16;
            app.ContourplotslevelsLabel.Layout.Column = [1 2];
            app.ContourplotslevelsLabel.Text = 'Levels';

            % Create LevelsSlider
            app.LevelsSlider = uislider(app.GridLayout4);
            app.LevelsSlider.Limits = [1 15];
            app.LevelsSlider.ValueChangedFcn = createCallbackFcn(app, @LevelsSliderValueChanged, true);
            app.LevelsSlider.Layout.Row = [15 17];
            app.LevelsSlider.Layout.Column = [3 7];
            app.LevelsSlider.FontAngle = 'italic';
            app.LevelsSlider.Value = 1;

            % Create ContourplottypeDropDownLabel
            app.ContourplottypeDropDownLabel = uilabel(app.GridLayout4);
            app.ContourplottypeDropDownLabel.HorizontalAlignment = 'right';
            app.ContourplottypeDropDownLabel.FontAngle = 'italic';
            app.ContourplottypeDropDownLabel.Layout.Row = 18;
            app.ContourplottypeDropDownLabel.Layout.Column = [1 3];
            app.ContourplottypeDropDownLabel.Text = 'Contour plot type';

            % Create ContourplottypeDropDown
            app.ContourplottypeDropDown = uidropdown(app.GridLayout4);
            app.ContourplottypeDropDown.Items = {'Parula', 'Jet', 'Hot', 'Cool', 'Spring', 'Summer', 'Winter', 'Gray'};
            app.ContourplottypeDropDown.ValueChangedFcn = createCallbackFcn(app, @ContourplottypeDropDownValueChanged, true);
            app.ContourplottypeDropDown.Layout.Row = 18;
            app.ContourplottypeDropDown.Layout.Column = [4 5];
            app.ContourplottypeDropDown.Value = 'Jet';

            % Create TesttypeDropDownLabel
            app.TesttypeDropDownLabel = uilabel(app.GridLayout4);
            app.TesttypeDropDownLabel.HorizontalAlignment = 'right';
            app.TesttypeDropDownLabel.Layout.Row = 14;
            app.TesttypeDropDownLabel.Layout.Column = [1 3];
            app.TesttypeDropDownLabel.Text = 'Test type';

            % Create TesttypeDropDown
            app.TesttypeDropDown = uidropdown(app.GridLayout4);
            app.TesttypeDropDown.Items = {'3D', '4D'};
            app.TesttypeDropDown.ValueChangedFcn = createCallbackFcn(app, @TesttypeDropDownValueChanged, true);
            app.TesttypeDropDown.Layout.Row = 14;
            app.TesttypeDropDown.Layout.Column = [4 5];
            app.TesttypeDropDown.Value = '3D';

            % Create ImporteddataTextAreaLabel
            app.ImporteddataTextAreaLabel = uilabel(app.GridLayout4);
            app.ImporteddataTextAreaLabel.HorizontalAlignment = 'right';
            app.ImporteddataTextAreaLabel.WordWrap = 'on';
            app.ImporteddataTextAreaLabel.Layout.Row = 20;
            app.ImporteddataTextAreaLabel.Layout.Column = [1 3];
            app.ImporteddataTextAreaLabel.Text = 'Imported data';

            % Create ImporteddataTextArea
            app.ImporteddataTextArea = uitextarea(app.GridLayout4);
            app.ImporteddataTextArea.ValueChangedFcn = createCallbackFcn(app, @ImporteddataTextAreaValueChanged, true);
            app.ImporteddataTextArea.Editable = 'off';
            app.ImporteddataTextArea.Layout.Row = [20 22];
            app.ImporteddataTextArea.Layout.Column = [4 6];

            % Create QualityDropDownLabel
            app.QualityDropDownLabel = uilabel(app.GridLayout4);
            app.QualityDropDownLabel.HorizontalAlignment = 'right';
            app.QualityDropDownLabel.Layout.Row = 29;
            app.QualityDropDownLabel.Layout.Column = 3;
            app.QualityDropDownLabel.Text = 'Quality';

            % Create QualityDropDown
            app.QualityDropDown = uidropdown(app.GridLayout4);
            app.QualityDropDown.Items = {'Low', 'High', 'Best'};
            app.QualityDropDown.ItemsData = {'200', '500', '800'};
            app.QualityDropDown.ValueChangedFcn = createCallbackFcn(app, @QualityDropDownValueChanged, true);
            app.QualityDropDown.Layout.Row = 29;
            app.QualityDropDown.Layout.Column = [4 5];
            app.QualityDropDown.Value = '500';

            % Create ColorbarlimitsLabel
            app.ColorbarlimitsLabel = uilabel(app.GridLayout4);
            app.ColorbarlimitsLabel.HorizontalAlignment = 'center';
            app.ColorbarlimitsLabel.FontSize = 14;
            app.ColorbarlimitsLabel.FontWeight = 'bold';
            app.ColorbarlimitsLabel.Layout.Row = 6;
            app.ColorbarlimitsLabel.Layout.Column = [3 5];
            app.ColorbarlimitsLabel.Text = 'Color bar limits';

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 2;

            % Create GridLayout3
            app.GridLayout3 = uigridlayout(app.RightPanel);
            app.GridLayout3.RowHeight = {'9.15x', '1x', '1x', '1x', '1x', '1x', '1x', 309};
            app.GridLayout3.BackgroundColor = [0.8 0.8 0.8];

            % Create UIAxes
            app.UIAxes = uiaxes(app.GridLayout3);
            title(app.UIAxes, 'HARDNESS histogram')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            zlabel(app.UIAxes, 'Z')
            app.UIAxes.ColorOrder = [0 0.447 0.741;0.85 0.325 0.098;0.929 0.694 0.125;0.466 0.674 0.188;0.494 0.184 0.556;0.301 0.745 0.933;0.635 0.078 0.184;0.549019607843137 0.337254901960784 0.294117647058824;0.890196078431372 0.466666666666667 0.76078431372549;0.498039215686275 0.498039215686275 0.498039215686275;0.737254901960784 0.741176470588235 0.133333333333333;0.682352941176471 0.780392156862745 0.909803921568627;0.596078431372549 0.874509803921569 0.541176470588235;1 0.596078431372549 0.588235294117647;0.772549019607843 0.690196078431373 0.835294117647059;0.768627450980392 0.611764705882353 0.580392156862745;0.780392156862745 0.780392156862745 0.780392156862745;0.858823529411765 0.858823529411765 0.552941176470588;0.619607843137255 0.854901960784314 0.898039215686275;0.619047619047619 0.464566929133858 1;0 0.362204724409449 0.0952380952380952;0.253968253968254 0.118110236220472 0.714285714285714;0.634920634920635 0.480314960629921 0;0 0.669291338582677 0.571428571428571];
            app.UIAxes.Layout.Row = 1;
            app.UIAxes.Layout.Column = 1;

            % Create UIAxes2
            app.UIAxes2 = uiaxes(app.GridLayout3);
            title(app.UIAxes2, 'MODULUS histogram')
            xlabel(app.UIAxes2, 'X')
            ylabel(app.UIAxes2, 'Y')
            zlabel(app.UIAxes2, 'Z')
            app.UIAxes2.ColorOrder = [0 0.447 0.741;0.85 0.325 0.098;0.929 0.694 0.125;0.466 0.674 0.188;0.494 0.184 0.556;0.301 0.745 0.933;0.635 0.078 0.184;0.549019607843137 0.337254901960784 0.294117647058824;0.890196078431372 0.466666666666667 0.76078431372549;0.498039215686275 0.498039215686275 0.498039215686275;0.737254901960784 0.741176470588235 0.133333333333333;0.682352941176471 0.780392156862745 0.909803921568627;0.596078431372549 0.874509803921569 0.541176470588235;1 0.596078431372549 0.588235294117647;0.772549019607843 0.690196078431373 0.835294117647059;0.768627450980392 0.611764705882353 0.580392156862745;0.780392156862745 0.780392156862745 0.780392156862745;0.858823529411765 0.858823529411765 0.552941176470588;0.619607843137255 0.854901960784314 0.898039215686275;0.619047619047619 0.464566929133858 1;0 0.362204724409449 0.0952380952380952;0.253968253968254 0.118110236220472 0.714285714285714;0.634920634920635 0.480314960629921 0;0 0.669291338582677 0.571428571428571];
            app.UIAxes2.Layout.Row = 1;
            app.UIAxes2.Layout.Column = 2;

            % Create UIAxes3
            app.UIAxes3 = uiaxes(app.GridLayout3);
            title(app.UIAxes3, 'HARDNESS contour plot')
            xlabel(app.UIAxes3, 'X')
            ylabel(app.UIAxes3, 'Y')
            zlabel(app.UIAxes3, 'Z')
            app.UIAxes3.ColorOrder = [0 0.447 0.741;0.85 0.325 0.098;0.929 0.694 0.125;0.466 0.674 0.188;0.494 0.184 0.556;0.301 0.745 0.933;0.635 0.078 0.184;0.549019607843137 0.337254901960784 0.294117647058824;0.890196078431372 0.466666666666667 0.76078431372549;0.498039215686275 0.498039215686275 0.498039215686275;0.737254901960784 0.741176470588235 0.133333333333333;0.682352941176471 0.780392156862745 0.909803921568627;0.596078431372549 0.874509803921569 0.541176470588235;1 0.596078431372549 0.588235294117647;0.772549019607843 0.690196078431373 0.835294117647059;0.768627450980392 0.611764705882353 0.580392156862745;0.780392156862745 0.780392156862745 0.780392156862745;0.858823529411765 0.858823529411765 0.552941176470588;0.619607843137255 0.854901960784314 0.898039215686275;0.619047619047619 0.464566929133858 1;0 0.362204724409449 0.0952380952380952;0.253968253968254 0.118110236220472 0.714285714285714;0.634920634920635 0.480314960629921 0;0 0.669291338582677 0.571428571428571];
            app.UIAxes3.Layout.Row = [2 8];
            app.UIAxes3.Layout.Column = 1;

            % Create UIAxes4
            app.UIAxes4 = uiaxes(app.GridLayout3);
            title(app.UIAxes4, 'MODULUS contour plot')
            xlabel(app.UIAxes4, 'X')
            ylabel(app.UIAxes4, 'Y')
            zlabel(app.UIAxes4, 'Z')
            app.UIAxes4.ColorOrder = [0 0.447 0.741;0.85 0.325 0.098;0.929 0.694 0.125;0.466 0.674 0.188;0.494 0.184 0.556;0.301 0.745 0.933;0.635 0.078 0.184;0.549019607843137 0.337254901960784 0.294117647058824;0.890196078431372 0.466666666666667 0.76078431372549;0.498039215686275 0.498039215686275 0.498039215686275;0.737254901960784 0.741176470588235 0.133333333333333;0.682352941176471 0.780392156862745 0.909803921568627;0.596078431372549 0.874509803921569 0.541176470588235;1 0.596078431372549 0.588235294117647;0.772549019607843 0.690196078431373 0.835294117647059;0.768627450980392 0.611764705882353 0.580392156862745;0.780392156862745 0.780392156862745 0.780392156862745;0.858823529411765 0.858823529411765 0.552941176470588;0.619607843137255 0.854901960784314 0.898039215686275;0.619047619047619 0.464566929133858 1;0 0.362204724409449 0.0952380952380952;0.253968253968254 0.118110236220472 0.714285714285714;0.634920634920635 0.480314960629921 0;0 0.669291338582677 0.571428571428571];
            app.UIAxes4.Layout.Row = [2 8];
            app.UIAxes4.Layout.Column = 2;

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = contourplotapp

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
